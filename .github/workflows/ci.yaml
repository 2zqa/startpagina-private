name: "Build and publish"

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-and-sign:
    name: "Build and sign"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cat manifest_base.json manifest_firefox-desktop.json | jq -s add > manifest.json
      - name: "Build Firefox extension"
        id: firefox-build
        uses: kewisch/action-web-ext@v1.2
        with:
          cmd: build
          filename: "{name}-{version}-firefox.xpi"
      - run: cat manifest_base.json manifest_chromium.json | jq -s add > manifest.json
      - name: "Build Chromium extension"
        id: chromium-build
        uses: kewisch/action-web-ext@v1.2
        with:
          cmd: build
          filename: "{name}-{version}-chromium.zip"
      - name: "Sign Firefox extension"
        id: web-ext-sign
        uses: kewisch/action-web-ext@v1.2
        with:
          cmd: sign
          source: ${{ steps.firefox-build.outputs.target }}
          channel: unlisted
          apiKey: ${{ secrets.AMO_SIGN_KEY }}
          apiSecret: ${{ secrets.AMO_SIGN_SECRET }}
          timeout: 900000
      - name: "Upload extensions"
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: build
          path: |
            ${{ steps.chromium-build.outputs.target }}
            ${{ steps.web-ext-sign.outputs.target }}

  release:
    name: "Release"
    needs: build-and-sign
    runs-on: ubuntu-latest
    permissions:
      contents: write # For creating a release
    steps:
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: build
      - name: "Create Release"
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          files: ${{ steps.download.outputs.download-path }}/* # Upload all files from the artifact

  deploy:
    name: "Deploy to GitHub pages"
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read # For downloading the releases
      pages: write # Needed for deploying to GitHub pages
      id-token: write # To verify the deployment originates from an appropriate source
    steps:
      - run: mkdir public
      - uses: 2zqa/generate-update-manifest@v1
        with:
          addon-id: ${{ vars.ADDON_ID }}
          output-file: public/updates.json
          asset-filter: "*.xpi"
      - uses: actions/upload-pages-artifact@v2
        with:
          name: update-manifest
          path: public
      - uses: actions/deploy-pages@v2
        id: deploy
        with:
          artifact_name: "update-manifest"
      - run: |
          echo "Deployed update manifest to ${{ steps.deploy.outputs.page_url }}updates.json" >> $GITHUB_STEP_SUMMARY
